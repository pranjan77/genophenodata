#some urls
#chado natural diversity module
https://github.com/GMOD/Chado/blob/master/chado/modules/natural_diversity/natural_diversity.sql
#Solr genotype phenotype
#http://www.mousephenotype.org/data/documentation/phenotype-help
#EBI
#https://github.com/mpi2/PhenotypeArchive/wiki/Genotype-associated-Phenotype-calls-REST-API



module KBaseGenotypePhenotype{

 /*
     geolocation_id: The geo-referencable location of the stock.
     description: A textual representation of the location, if this is the original georeference. Optional if the original georeference is available in lat/long coordinates.
     latitude: The decimal latitude coordinate of the georeference, using positive and negative sign to indicate N and S, respectively.
     longitude: The decimal longitude coordinate of the georeference, using positive and negative sign to indicate E and W, respectively.
     altitude: The altitude (elevation) of the location in meters. If the altitude is only known as a range, this is the average.
 */

    typedef structure {
            string geolocation_id;
            string description;
            float latitude;
            float longitude;
            float altitude;
    } GeoLocation;
    
    
/*
The Experiment represents each individual assay that is undertaken (this is usually *not* an 
entire experiment). Each Experiment should give rise to a single genotype or 
phenotype and be described via 1 (or more) protocols. 
*/

    typedef structure {
            string experiment_id;
            GeoLocation GeoLocation_info;
            string type_id;
    } Experiment;


/*
Used to group together related Experiment records. All Experiment should be linked to at least one ExperimentProject. 
GeoLocation_info: GeoLocation of the individual being assayed
type_id: type of assay, genotyping, phenotyping, should ideally be a detailed structure picking from database somewhere

*/

    typedef structure {
            string experiment_project_id;
            GeoLocation GeoLocation_info;
            string type_id;
    } ExperimentProject;
    

/*
An Experiment can have any number of slot-value property tags attached to it. This is an alternative to
hardcoding a list of columns in  schema, and is completely extensible. There is a unique constraint, stockprop_c1, for
the combination of stock_id, rank, and type_id. Multivalued property-value pairs must be differentiated by rank.';
*/

    typedef structure {
            string experimentprop_id;
            Experiment experiment_id;
            string type_id;
            string value;
            int rank;
    } ExperimentProp;





